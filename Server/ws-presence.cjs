/**
 * server/ws-presence.cjs
 * K√∂r: node server/ws-presence.cjs
 *
 * Meddelanden fr√•n klient:
 * - { type:"HELLO", room:"duel-<id>", user:{id,name} }          // g√• med i ett duell-rum (n√§rvaro)
 * - { type:"READY", ready:boolean }                              // sl√• p√•/av "redo" i aktuellt rum
 * - { type:"HELLO_USER", user:{id,name} }                        // anslut som anv√§ndare utan rum (f√∂r globala notiser)
 * - { type:"NOTIFY", toUserId:"...", event:"INVITED", payload }  // skicka direkt-notis till en viss anv√§ndare
 * - { type:"LEAVE" }                                             // l√§mna nuvarande rum (om n√•got)
 * - { type:"PING" }                                              // h√•ll-vid-liv (klienten pingar, servern svarar)
 *
 * Meddelanden fr√•n server:
 * - { type:"CONNECTED", ts }                        // skickas direkt vid anslutning
 * - { type:"ACK", room }                            // kvittens efter HELLO (rum)
 * - { type:"ACK_USER" }                             // kvittens efter HELLO_USER
 * - { type:"SNAPSHOT", room, users:[{id,name,ready}] }  // aktuell n√§rvarolista f√∂r ett rum
 * - { type:"LEFT", room, userId }                   // info om att en spelare l√§mnat
 * - { type:"PONG" }                                 // svar p√• PING
 * - { type: <event>, payload }                      // direkth√§ndelser (NOTIFY), t.ex. {type:"INVITED", payload:{...}}
 */

const http = require("http");
const { WebSocketServer } = require("ws");

// Port f√∂r websocket-servern
const PORT = Number(process.env.PORT || 3001);

// Skapa enkel HTTP-server (beh√∂vs f√∂r ws)
const server = http.createServer();

// Starta WebSocketServer och l√•t den anv√§nda HTTP-servern
const wss = new WebSocketServer({ server, clientTracking: true });

/**
 * Datastrukturer:
 * - rooms: Map<roomId, Set<ws>> h√•ller vilka websockets som √§r i vilket rum
 * - meta: WeakMap<ws, { room: string|null, user:{id,name}, ready:boolean }>
 *   h√∂r ihop med varje anslutning och lagrar vem/vilket rum/redo-status
 */
const rooms = new Map();
const meta = new WeakMap();

/**
 * H√§mtar alla anv√§ndare i ett visst rum, inklusive deras "ready"-flagga.
 * Returnerar [{id,name,ready}, ...].
 */
function getUsersInRoom(room) {
    const set = rooms.get(room);
    if (!set) return [];
    const users = [];
    for (const ws of set) {
        const m = meta.get(ws);
        if (m?.user) users.push({ ...m.user, ready: !!m.ready });
    }
    return users;
}

/**
 * L√•t en socket g√• med i ett rum, och spara user + resetta ready=false.
 */
function joinRoom(ws, room, user) {
    if (!rooms.has(room)) rooms.set(room, new Set());
    rooms.get(room).add(ws);
    meta.set(ws, { room, user, ready: false });
}

/**
 * L√•t en socket l√§mna sitt rum (om den var med i n√•got) och ta bort fr√•n mappar.
 * Returnerar { room, userId } f√∂r loggning/uts√§ndning.
 */
function leaveRoom(ws) {
    const m = meta.get(ws);
    if (!m) return;
    const set = rooms.get(m.room);
    if (set) {
        set.delete(ws);
        if (set.size === 0) rooms.delete(m.room);
    }
    const info = { room: m.room, userId: m.user?.id };
    // Vi tar bort meta helt (enklare och s√§kert)
    meta.delete(ws);
    return info;
}

/**
 * Skicka ett meddelande till alla i ett rum.
 * - payload: valfritt JS-objekt som serialiseras till JSON
 * - except: skicka inte till denna socket (ex. avs√§ndaren) om satt
 */
function broadcast(room, payload, except = null) {
    const set = rooms.get(room);
    if (!set) return;
    const msg = JSON.stringify(payload);
    for (const ws of set) {
        if (ws !== except && ws.readyState === ws.OPEN) {
            try { ws.send(msg); } catch { /* ignorera s√§ndfel */ }
        }
    }
}

/**
 * Skicka ett direktmeddelande till en viss anv√§ndare (oavsett rum).
 * G√•r igenom alla √∂ppna klienter, l√§ser meta och matchar p√• user.id.
 */
function sendToUser(userId, payload) {
    const msg = JSON.stringify(payload);
    for (const client of wss.clients) {
        try {
            const m = meta.get(client);
            if (client.readyState === client.OPEN && m?.user?.id === userId) {
                client.send(msg);
            }
        } catch { /* ignorera s√§ndfel */ }
    }
}

/**
 * N√§r en klient ansluter:
 * - s√§tt upp ping/pong f√∂r att k√§nna av d√∂da anslutningar
 * - skicka ett CONNECTED-meddelande
 * - lyssna p√• inkommande meddelanden (HELLO, READY, HELLO_USER, NOTIFY, LEAVE, PING)
 * - hantera st√§ngning och fel
 */
wss.on("connection", (ws, req) => {
    const ip = req.socket.remoteAddress;
    console.log(`üîó WS-anslutning fr√•n ${ip}`);

    // En enkel isAlive-flagga som s√§tts p√• "pong"
    ws.isAlive = true;
    ws.on("pong", () => (ws.isAlive = true));

    // H√§lsa v√§lkommen ‚Äì klienten vet d√• att koppling finns
    try { ws.send(JSON.stringify({ type: "CONNECTED", ts: Date.now() })); } catch { }

    ws.on("message", (raw) => {
        let data;
        try { data = JSON.parse(String(raw)); } catch { return; }
        if (!data || typeof data !== "object") return;

        // ==== Rum/presence: g√• med i ett rum (HELLO) ====
        if (data.type === "HELLO" && typeof data.room === "string" && data.user?.id) {
            const user = { id: String(data.user.id), name: String(data.user.name || "User") };
            joinRoom(ws, data.room, user);
            console.log(`üë§ ${user.name} (${user.id}) gick med i ${data.room}`);

            // Kvittens till den som gick med
            try { ws.send(JSON.stringify({ type: "ACK", room: data.room })); } catch { }

            // Skicka ut f√§rsk snapshot till alla i rummet
            const users = getUsersInRoom(data.room);
            broadcast(data.room, { type: "SNAPSHOT", room: data.room, users });
            return;
        }

        // ==== Byt "redo"-status i aktuellt rum ====
        if (data.type === "READY" && typeof data.ready === "boolean") {
            const m = meta.get(ws);
            if (!m || !m.room) return;
            m.ready = !!data.ready;
            // Ny snapshot till rummet
            const users = getUsersInRoom(m.room);
            broadcast(m.room, { type: "SNAPSHOT", room: m.room, users });
            return;
        }

        // ==== Anslut som "global anv√§ndare" utan rum (f√∂r att ta emot notiser √∂verallt) ====
        if (data.type === "HELLO_USER" && data.user?.id) {
            const user = { id: String(data.user.id), name: String(data.user.name || "User") };
            meta.set(ws, { room: null, user, ready: false });
            console.log(`üë§ ${user.name} (${user.id}) ansl√∂t (HELLO_USER)`);
            try { ws.send(JSON.stringify({ type: "ACK_USER" })); } catch { }
            return;
        }

        /**
         * ==== Direkth√§ndelse/Notis till viss anv√§ndare (NOTIFY) ====
         * Exempel:
         * { type:"NOTIFY", toUserId:"...", event:"INVITED", payload:{ duelId, subject, fromName } }
         * Servern skickar vidare detta som { type: event, payload } till den anv√§ndaren.
         */
        if (data.type === "NOTIFY" && data.toUserId && data.event) {
            const to = String(data.toUserId);
            const event = String(data.event);
            const payload = data.payload || {};
            console.log(`üì£ NOTIFY -> ${to} (${event})`);
            sendToUser(to, { type: event, payload });
            return;
        }

        // ==== L√§mna nuvarande rum ====
        if (data.type === "LEAVE") {
            const res = leaveRoom(ws);
            if (res?.room) {
                console.log(`üëã ${res.userId} l√§mnade ${res.room}`);
                broadcast(res.room, { type: "LEFT", room: res.room, userId: res.userId });
                const users = getUsersInRoom(res.room);
                broadcast(res.room, { type: "SNAPSHOT", room: res.room, users });
            }
            return;
        }

        // ==== Ping/pong (klienten pingar, servern svarar) ====
        if (data.type === "PING") {
            try { ws.send(JSON.stringify({ type: "PONG" })); } catch { }
            return;
        }
    });

    // St√§ngning: ta bort fr√•n rum och uppdatera snapshot
    ws.on("close", () => {
        const res = leaveRoom(ws);
        if (res?.room) {
            console.log(`üîå st√§ngd -> ${res.userId} l√§mnade ${res.room}`);
            broadcast(res.room, { type: "LEFT", room: res.room, userId: res.userId });
            const users = getUsersInRoom(res.room);
            broadcast(res.room, { type: "SNAPSHOT", room: res.room, users });
        }
    });

    // Fel: behandla som st√§ngning
    ws.on("error", () => {
        const res = leaveRoom(ws);
        if (res?.room) {
            console.log(`üí• fel -> ${res.userId} l√§mnade ${res.room}`);
            broadcast(res.room, { type: "LEFT", room: res.room, userId: res.userId });
            const users = getUsersInRoom(res.room);
            broadcast(res.room, { type: "SNAPSHOT", room: res.room, users });
        }
    });
});

/**
 * En enkel intervall som pingar alla anslutningar f√∂r att uppt√§cka trasiga
 * kopplingar. Om en klient inte svarar med "pong" s√• termineras den.
 */
const interval = setInterval(() => {
    for (const ws of wss.clients) {
        if (!ws.isAlive) {
            try { ws.terminate(); } catch { }
            continue;
        }
        ws.isAlive = false;
        try { ws.ping(); } catch { }
    }
}, 30000);

// St√§da n√§r servern st√§ngs
wss.on("close", () => clearInterval(interval));

// Starta servern
server.listen(PORT, () => {
    console.log(`üöÄ Presence-WS lyssnar p√• ws://localhost:${PORT}`);
});
